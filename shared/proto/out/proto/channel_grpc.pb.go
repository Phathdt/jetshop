// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/channel.proto

package jetshop_proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChannelServiceClient is the client API for ChannelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChannelServiceClient interface {
	ListHermesChannelCredential(ctx context.Context, in *ChannelListHermesCredentialRequest, opts ...grpc.CallOption) (*ChannelListHermesCredentialResponse, error)
	GetHermesChannelCredential(ctx context.Context, in *ChannelGetHermesCredentialRequest, opts ...grpc.CallOption) (*ChannelGetHermesCredentialResponse, error)
}

type channelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChannelServiceClient(cc grpc.ClientConnInterface) ChannelServiceClient {
	return &channelServiceClient{cc}
}

func (c *channelServiceClient) ListHermesChannelCredential(ctx context.Context, in *ChannelListHermesCredentialRequest, opts ...grpc.CallOption) (*ChannelListHermesCredentialResponse, error) {
	out := new(ChannelListHermesCredentialResponse)
	err := c.cc.Invoke(ctx, "/proto.ChannelService/ListHermesChannelCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) GetHermesChannelCredential(ctx context.Context, in *ChannelGetHermesCredentialRequest, opts ...grpc.CallOption) (*ChannelGetHermesCredentialResponse, error) {
	out := new(ChannelGetHermesCredentialResponse)
	err := c.cc.Invoke(ctx, "/proto.ChannelService/GetHermesChannelCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChannelServiceServer is the server API for ChannelService service.
// All implementations should embed UnimplementedChannelServiceServer
// for forward compatibility
type ChannelServiceServer interface {
	ListHermesChannelCredential(context.Context, *ChannelListHermesCredentialRequest) (*ChannelListHermesCredentialResponse, error)
	GetHermesChannelCredential(context.Context, *ChannelGetHermesCredentialRequest) (*ChannelGetHermesCredentialResponse, error)
}

// UnimplementedChannelServiceServer should be embedded to have forward compatible implementations.
type UnimplementedChannelServiceServer struct {
}

func (UnimplementedChannelServiceServer) ListHermesChannelCredential(context.Context, *ChannelListHermesCredentialRequest) (*ChannelListHermesCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHermesChannelCredential not implemented")
}
func (UnimplementedChannelServiceServer) GetHermesChannelCredential(context.Context, *ChannelGetHermesCredentialRequest) (*ChannelGetHermesCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHermesChannelCredential not implemented")
}

// UnsafeChannelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChannelServiceServer will
// result in compilation errors.
type UnsafeChannelServiceServer interface {
	mustEmbedUnimplementedChannelServiceServer()
}

func RegisterChannelServiceServer(s grpc.ServiceRegistrar, srv ChannelServiceServer) {
	s.RegisterService(&ChannelService_ServiceDesc, srv)
}

func _ChannelService_ListHermesChannelCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelListHermesCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).ListHermesChannelCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ChannelService/ListHermesChannelCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).ListHermesChannelCredential(ctx, req.(*ChannelListHermesCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelService_GetHermesChannelCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelGetHermesCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).GetHermesChannelCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ChannelService/GetHermesChannelCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).GetHermesChannelCredential(ctx, req.(*ChannelGetHermesCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChannelService_ServiceDesc is the grpc.ServiceDesc for ChannelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChannelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ChannelService",
	HandlerType: (*ChannelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListHermesChannelCredential",
			Handler:    _ChannelService_ListHermesChannelCredential_Handler,
		},
		{
			MethodName: "GetHermesChannelCredential",
			Handler:    _ChannelService_GetHermesChannelCredential_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/channel.proto",
}
