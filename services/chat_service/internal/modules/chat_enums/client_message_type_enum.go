// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.6
// Revision: 97611fddaa414f53713597918c5e954646cb8623
// Build Date: 2023-03-26T21:38:06Z
// Built By: goreleaser

package chat_enums

import (
	"errors"
	"fmt"
)

const (
	// ClientMessageTypeText is a ClientMessageType of type text.
	ClientMessageTypeText ClientMessageType = "text"
	// ClientMessageTypeSystem is a ClientMessageType of type system.
	ClientMessageTypeSystem ClientMessageType = "system"
	// ClientMessageTypeImage is a ClientMessageType of type image.
	ClientMessageTypeImage ClientMessageType = "image"
	// ClientMessageTypeEmoji is a ClientMessageType of type emoji.
	ClientMessageTypeEmoji ClientMessageType = "emoji"
	// ClientMessageTypeProduct is a ClientMessageType of type product.
	ClientMessageTypeProduct ClientMessageType = "product"
	// ClientMessageTypeProductList is a ClientMessageType of type product_list.
	ClientMessageTypeProductList ClientMessageType = "product_list"
	// ClientMessageTypeVideo is a ClientMessageType of type video.
	ClientMessageTypeVideo ClientMessageType = "video"
	// ClientMessageTypeVoucher is a ClientMessageType of type voucher.
	ClientMessageTypeVoucher ClientMessageType = "voucher"
	// ClientMessageTypeOrder is a ClientMessageType of type order.
	ClientMessageTypeOrder ClientMessageType = "order"
	// ClientMessageTypeLineItem is a ClientMessageType of type line_item.
	ClientMessageTypeLineItem ClientMessageType = "line_item"
	// ClientMessageTypeAutoReply is a ClientMessageType of type auto_reply.
	ClientMessageTypeAutoReply ClientMessageType = "auto_reply"
	// ClientMessageTypeReceipt is a ClientMessageType of type receipt.
	ClientMessageTypeReceipt ClientMessageType = "receipt"
	// ClientMessageTypeGeneric is a ClientMessageType of type generic.
	ClientMessageTypeGeneric ClientMessageType = "generic"
	// ClientMessageTypeAds is a ClientMessageType of type ads.
	ClientMessageTypeAds ClientMessageType = "ads"
	// ClientMessageTypeCarousel is a ClientMessageType of type carousel.
	ClientMessageTypeCarousel ClientMessageType = "carousel"
)

var ErrInvalidClientMessageType = errors.New("not a valid ClientMessageType")

// String implements the Stringer interface.
func (x ClientMessageType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ClientMessageType) IsValid() bool {
	_, err := ParseClientMessageType(string(x))
	return err == nil
}

var _ClientMessageTypeValue = map[string]ClientMessageType{
	"text":         ClientMessageTypeText,
	"system":       ClientMessageTypeSystem,
	"image":        ClientMessageTypeImage,
	"emoji":        ClientMessageTypeEmoji,
	"product":      ClientMessageTypeProduct,
	"product_list": ClientMessageTypeProductList,
	"video":        ClientMessageTypeVideo,
	"voucher":      ClientMessageTypeVoucher,
	"order":        ClientMessageTypeOrder,
	"line_item":    ClientMessageTypeLineItem,
	"auto_reply":   ClientMessageTypeAutoReply,
	"receipt":      ClientMessageTypeReceipt,
	"generic":      ClientMessageTypeGeneric,
	"ads":          ClientMessageTypeAds,
	"carousel":     ClientMessageTypeCarousel,
}

// ParseClientMessageType attempts to convert a string to a ClientMessageType.
func ParseClientMessageType(name string) (ClientMessageType, error) {
	if x, ok := _ClientMessageTypeValue[name]; ok {
		return x, nil
	}
	return ClientMessageType(""), fmt.Errorf("%s is %w", name, ErrInvalidClientMessageType)
}
