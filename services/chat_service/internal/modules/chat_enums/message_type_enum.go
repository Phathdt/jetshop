// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.6
// Revision: 97611fddaa414f53713597918c5e954646cb8623
// Build Date: 2023-03-26T21:38:06Z
// Built By: goreleaser

package chat_enums

import (
	"errors"
	"fmt"
)

const (
	// MessageTypeText is a MessageType of type text.
	MessageTypeText MessageType = "text"
	// MessageTypeSystem is a MessageType of type system.
	MessageTypeSystem MessageType = "system"
	// MessageTypeImage is a MessageType of type image.
	MessageTypeImage MessageType = "image"
	// MessageTypeSticker is a MessageType of type sticker.
	MessageTypeSticker MessageType = "sticker"
	// MessageTypeProduct is a MessageType of type product.
	MessageTypeProduct MessageType = "product"
	// MessageTypeProductList is a MessageType of type product_list.
	MessageTypeProductList MessageType = "product_list"
	// MessageTypeOrder is a MessageType of type order.
	MessageTypeOrder MessageType = "order"
	// MessageTypeVoucher is a MessageType of type voucher.
	MessageTypeVoucher MessageType = "voucher"
	// MessageTypeVideo is a MessageType of type video.
	MessageTypeVideo MessageType = "video"
	// MessageTypeInviteFollow is a MessageType of type invite_follow.
	MessageTypeInviteFollow MessageType = "invite_follow"
	// MessageTypeGeneric is a MessageType of type generic.
	MessageTypeGeneric MessageType = "generic"
	// MessageTypePostback is a MessageType of type postback.
	MessageTypePostback MessageType = "postback"
	// MessageTypeReceipt is a MessageType of type receipt.
	MessageTypeReceipt MessageType = "receipt"
	// MessageTypeCarousel is a MessageType of type carousel.
	MessageTypeCarousel MessageType = "carousel"
	// MessageTypeAds is a MessageType of type ads.
	MessageTypeAds MessageType = "ads"
	// MessageTypeUnknown is a MessageType of type unknown.
	MessageTypeUnknown MessageType = "unknown"
	// MessageTypeTrigger is a MessageType of type trigger.
	MessageTypeTrigger MessageType = "trigger"
)

var ErrInvalidMessageType = errors.New("not a valid MessageType")

// String implements the Stringer interface.
func (x MessageType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x MessageType) IsValid() bool {
	_, err := ParseMessageType(string(x))
	return err == nil
}

var _MessageTypeValue = map[string]MessageType{
	"text":          MessageTypeText,
	"system":        MessageTypeSystem,
	"image":         MessageTypeImage,
	"sticker":       MessageTypeSticker,
	"product":       MessageTypeProduct,
	"product_list":  MessageTypeProductList,
	"order":         MessageTypeOrder,
	"voucher":       MessageTypeVoucher,
	"video":         MessageTypeVideo,
	"invite_follow": MessageTypeInviteFollow,
	"generic":       MessageTypeGeneric,
	"postback":      MessageTypePostback,
	"receipt":       MessageTypeReceipt,
	"carousel":      MessageTypeCarousel,
	"ads":           MessageTypeAds,
	"unknown":       MessageTypeUnknown,
	"trigger":       MessageTypeTrigger,
}

// ParseMessageType attempts to convert a string to a MessageType.
func ParseMessageType(name string) (MessageType, error) {
	if x, ok := _MessageTypeValue[name]; ok {
		return x, nil
	}
	return MessageType(""), fmt.Errorf("%s is %w", name, ErrInvalidMessageType)
}
