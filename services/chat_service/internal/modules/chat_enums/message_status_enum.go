// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.6
// Revision: 97611fddaa414f53713597918c5e954646cb8623
// Build Date: 2023-03-26T21:38:06Z
// Built By: goreleaser

package chat_enums

import (
	"errors"
	"fmt"
)

const (
	// MessageStatusSent is a MessageStatus of type sent.
	MessageStatusSent MessageStatus = "sent"
	// MessageStatusReceived is a MessageStatus of type received.
	MessageStatusReceived MessageStatus = "received"
	// MessageStatusDeleted is a MessageStatus of type deleted.
	MessageStatusDeleted MessageStatus = "deleted"
)

var ErrInvalidMessageStatus = errors.New("not a valid MessageStatus")

// String implements the Stringer interface.
func (x MessageStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x MessageStatus) IsValid() bool {
	_, err := ParseMessageStatus(string(x))
	return err == nil
}

var _MessageStatusValue = map[string]MessageStatus{
	"sent":     MessageStatusSent,
	"received": MessageStatusReceived,
	"deleted":  MessageStatusDeleted,
}

// ParseMessageStatus attempts to convert a string to a MessageStatus.
func ParseMessageStatus(name string) (MessageStatus, error) {
	if x, ok := _MessageStatusValue[name]; ok {
		return x, nil
	}
	return MessageStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidMessageStatus)
}
