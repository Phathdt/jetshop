// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.6
// Revision: 97611fddaa414f53713597918c5e954646cb8623
// Build Date: 2023-03-26T21:38:06Z
// Built By: goreleaser

package chat_enums

import (
	"errors"
	"fmt"
)

const (
	// FromTypeBuyer is a FromType of type buyer.
	FromTypeBuyer FromType = "buyer"
	// FromTypeSeller is a FromType of type seller.
	FromTypeSeller FromType = "seller"
	// FromTypeAuto is a FromType of type auto.
	FromTypeAuto FromType = "auto"
	// FromTypeChatbot is a FromType of type chatbot.
	FromTypeChatbot FromType = "chatbot"
	// FromTypeSystem is a FromType of type system.
	FromTypeSystem FromType = "system"
	// FromTypeTrigger is a FromType of type trigger.
	FromTypeTrigger FromType = "trigger"
)

var ErrInvalidFromType = errors.New("not a valid FromType")

// String implements the Stringer interface.
func (x FromType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x FromType) IsValid() bool {
	_, err := ParseFromType(string(x))
	return err == nil
}

var _FromTypeValue = map[string]FromType{
	"buyer":   FromTypeBuyer,
	"seller":  FromTypeSeller,
	"auto":    FromTypeAuto,
	"chatbot": FromTypeChatbot,
	"system":  FromTypeSystem,
	"trigger": FromTypeTrigger,
}

// ParseFromType attempts to convert a string to a FromType.
func ParseFromType(name string) (FromType, error) {
	if x, ok := _FromTypeValue[name]; ok {
		return x, nil
	}
	return FromType(""), fmt.Errorf("%s is %w", name, ErrInvalidFromType)
}
